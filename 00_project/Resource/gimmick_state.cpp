//============================================================
//
//	状態ギミック処理 [gimmick_state.cpp]
//	Author：小原立暉
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "manager.h"
#include "gimmick_state.h"
#include "player_clone.h"
#include "collision.h"

//===========================================
//  定数定義
//===========================================
namespace
{
	const D3DXVECTOR3 CLONE_RADIUS = D3DXVECTOR3(20.0f, 0.0f, 20.0f);	// 半径
}

//************************************************************
//	子クラス [CGimmickState] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CGimmickState::CGimmickState() : CGimmick()
{

}

//============================================================
//	デストラクタ
//============================================================
CGimmickState::~CGimmickState()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CGimmickState::Init(void)
{
	// オブジェクト3Dの初期化
	if (FAILED(CGimmick::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CGimmickState::Uninit(void)
{
	// オブジェクト3Dの終了
	CGimmick::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CGimmickState::Update(const float fDeltaTime)
{
	// オブジェクト3Dの更新
	CGimmick::Update(fDeltaTime);
}

//============================================================
//	描画処理
//============================================================
void CGimmickState::Draw(CShader* pShader)
{
	// オブジェクト3Dの描画
	CGimmick::Draw(pShader);
}

//===========================================
//  分身との当たり判定
//===========================================
void CGimmickState::CollisionClone()
{
	// 分身のリスト構造が無ければ抜ける
	if (CPlayerClone::GetList() == nullptr) { return; }

	std::list<CPlayerClone*> list = CPlayerClone::GetList()->GetList();	// リストを取得
	D3DXVECTOR3 pos = GetVec3Position();	// 位置
	D3DXVECTOR3 size = GetVec3Sizing() * 0.5f;	// サイズ
	D3DXVECTOR3 posClone = VEC3_ZERO;		// 分身の位置
	D3DXVECTOR3 sizeClone = CLONE_RADIUS;	// 分身のサイズ

	for (auto clone : list)
	{
		// 位置を取得
		posClone = clone->GetVec3Position();

		if (!collision::Box2D
		(
			pos,		// 判定位置
			posClone,	// 判定目標位置
			size,		// 判定サイズ(右・上・後)
			size,		// 判定サイズ(左・下・前)
			sizeClone,	// 判定目標サイズ(右・上・後)
			sizeClone	// 判定目標サイズ(左・下・前)
		))
		{ continue; }
	}
}
