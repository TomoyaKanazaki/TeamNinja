//============================================================
//
//	クリア失敗マネージャー処理 [clearFailManager.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "clearFailManager.h"
#include "manager.h"
#include "anim2D.h"
#include "string2D.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const int PRIORITY = 6;	// クリア失敗マネージャーの優先順位
}

//************************************************************
//	静的メンバ変数宣言
//************************************************************
CClearFailManager::AFuncUpdateState CClearFailManager::m_aFuncUpdateState[] =	// 状態更新関数
{
	nullptr,						// 何もしない更新
	&CClearFailManager::UpdateWait,	// 待機更新
	nullptr,						// 終了更新
};

//************************************************************
//	親クラス [CClearFailManager] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CClearFailManager::CClearFailManager() :
	m_state		(STATE_NONE),	// 状態
	m_fCurTime	(0.0f)			// 現在の待機時間
{
	// スタティックアサート
	static_assert(NUM_ARRAY(m_aFuncUpdateState) == CClearFailManager::STATE_MAX, "ERROR : State Count Mismatch");
}

//============================================================
//	デストラクタ
//============================================================
CClearFailManager::~CClearFailManager()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CClearFailManager::Init(void)
{
	// メンバ変数を初期化
	//m_state		= STATE_;	// 状態	// TODO
	m_fCurTime	= 0.0f;		// 現在の待機時間

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CClearFailManager::Uninit(void)
{

}

//============================================================
//	更新処理
//============================================================
void CClearFailManager::Update(const float fDeltaTime)
{
	assert(m_state > NONE_IDX && m_state < STATE_MAX);
	if (m_aFuncUpdateState[m_state] != nullptr)
	{ // 更新関数が指定されている場合

		// 各状態ごとの更新
		(this->*(m_aFuncUpdateState[m_state]))(fDeltaTime);
	}
}

//============================================================
//	演出のスキップ処理
//============================================================
void CClearFailManager::SkipStaging(void)
{
	// 待機状態にする
	m_state = STATE_WAIT;
}

//============================================================
//	全UIオブジェクトの移動処理
//============================================================
void CClearFailManager::SetAllMove(const D3DXVECTOR3& rMove)
{

}

//============================================================
//	待機の更新処理
//============================================================
void CClearFailManager::UpdateWait(const float fDeltaTime)
{
	if (GET_INPUTPAD->IsAnyTrigger()
	||  GET_INPUTKEY->IsTrigger(DIK_SPACE))
	{
		// 終了状態にする
		m_state = STATE_END;
	}
}
