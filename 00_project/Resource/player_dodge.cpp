//============================================================
//
//	プレイヤーの回避エフェクト処理 [player_dodge.cpp]
//	Author：小原立暉
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "player_dodge.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{

}

//************************************************************
//	子クラス [CPlayerDodge] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CPlayerDodge::CPlayerDodge()
{

}

//============================================================
//	デストラクタ
//============================================================
CPlayerDodge::~CPlayerDodge()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CPlayerDodge::Init(void)
{
	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CPlayerDodge::Uninit(void)
{
	// エフェクトの情報を全消去する
	m_effectData.clear();

	// 自身を消す
	delete this;
}

//============================================================
//	更新処理
//============================================================
void CPlayerDodge::Update(const D3DXVECTOR3& rPos)
{
	int nCnt = 0;

	for (CEffekseer::CEffectData* pEffect : m_effectData)
	{
		if (pEffect != nullptr && !pEffect->GetExist())
		{ // エフェクトを削除する場合

			// 消去する
			CEffekseer::CEffectData* pDelete = *(m_effectData.begin() + nCnt);
			SAFE_DELETE(pDelete);
			m_effectData.erase(m_effectData.begin() + nCnt);
		}
		else
		{ // 上記以外

			// エフェクトの位置を合わせる
			pEffect->m_pos = rPos;
		}

		// カウントを加算する
		nCnt++;
	}
}


//============================================================
// 登録処理
//============================================================
void CPlayerDodge::Regist(CEffekseer::CEffectData* pEffect)
{
	// エフェクトを登録する
	m_effectData.push_back(pEffect);
}

//============================================================
// 生成処理
//============================================================
CPlayerDodge* CPlayerDodge::Create(void)
{
	// ポインタを宣言
	CPlayerDodge* pPlayer = new CPlayerDodge;	// プレイヤー情報

	// 生成に失敗した場合nullを返す
	if (pPlayer == nullptr) { return nullptr; }

	// プレイヤーの初期化
	if (FAILED(pPlayer->Init()))
	{ // 初期化に失敗した場合

		// プレイヤーの破棄
		SAFE_DELETE(pPlayer);
		return nullptr;
	}

	// 生成したポインタを返す
	return pPlayer;
}
