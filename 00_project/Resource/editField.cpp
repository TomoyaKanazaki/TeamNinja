#if 1
//============================================================
//
//	エディットフィールド処理 [editField.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "editField.h"
#include "manager.h"
#include "input.h"
#include "collision.h"
#include "editStage.h"
#include "stage.h"

//************************************************************
//	マクロ定義
//************************************************************
#define KEY_CREATE		(DIK_0)	// 生成キー
#define NAME_CREATE		("0")	// 生成表示
#define KEY_RELEASE		(DIK_9)	// 破棄キー
#define NAME_RELEASE	("9")	// 破棄表示
#define KEY_TYPE		(DIK_2)	// 種類変更キー
#define NAME_TYPE		("2")	// 種類変更表示

#define KEY_UP_SCALE_X		(DIK_T)	// X軸拡大キー
#define NAME_UP_SCALE_X		("T")	// X軸拡大表示
#define KEY_DOWN_SCALE_X	(DIK_G)	// X軸縮小キー
#define NAME_DOWN_SCALE_X	("G")	// X軸縮小表示
#define KEY_UP_SCALE_Y		(DIK_Y)	// Y軸拡大キー
#define NAME_UP_SCALE_Y		("Y")	// Y軸拡大表示
#define KEY_DOWN_SCALE_Y	(DIK_H)	// Y軸縮小キー
#define NAME_DOWN_SCALE_Y	("H")	// Y軸縮小表示
#define KEY_UP_SCALE_Z		(DIK_U)	// Z軸拡大キー
#define NAME_UP_SCALE_Z		("U")	// Z軸拡大表示
#define KEY_DOWN_SCALE_Z	(DIK_J)	// Z軸縮小キー
#define NAME_DOWN_SCALE_Z	("J")	// Z軸縮小表示

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const D3DXVECTOR2 INIT_SIZE = D3DXVECTOR2(50.0f, 50.0f);	// 大きさ
	const float	MAX_SIZE	= 10000.0f;	// 最大の大きさ
	const float	INIT_ALPHA	= 0.5f;		// 配置前のα値
}

//************************************************************
//	親クラス [CEditField] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CEditField::CEditField()
{
#if _DEBUG

	// メンバ変数をクリア
	m_pField = nullptr;	// フィールド情報
	memset(&m_infoCreate, 0, sizeof(m_infoCreate));	// フィールド配置情報

#endif	// _DEBUG
}

//============================================================
//	デストラクタ
//============================================================
CEditField::~CEditField()
{
#if _DEBUG
#endif	// _DEBUG
}

//============================================================
//	初期化処理
//============================================================
HRESULT CEditField::Init(void)
{
#if _DEBUG

	// ポインタを宣言
	CEditManager *pEditManager = GetPtrEditManager();	// エディットマネージャー情報
	if (pEditManager == nullptr)
	{ // エディットマネージャーが存在しない場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 変数を宣言
	D3DXVECTOR3 posEdit = pEditManager->GetVec3Position();	// エディットの位置

	// メンバ変数を初期化
	m_pField			 = nullptr;				// フィールド情報
	m_infoCreate.texture = (CField::ETexture)0;	// フィールド種類
	m_infoCreate.size	 = INIT_SIZE;			// 大きさ
	m_infoCreate.part	 = GRID2_ONE;			// テクスチャ分割数X

	// フィールドの生成
	m_pField = CField::Create
	( // 引数
		m_infoCreate.texture,	// 種類
		posEdit,				// 位置
		VEC3_ZERO,				// 向き
		m_infoCreate.size,		// 大きさ
		m_infoCreate.col,		// 色
		m_infoCreate.part		// テクスチャ分割数X
	);
	if (m_pField == nullptr)
	{ // 生成に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 色を設定
	D3DXCOLOR col = m_pField->GetColor();	// 元の色を取得
	m_pField->SetColor(D3DXCOLOR(col.r, col.g, col.b, INIT_ALPHA));

	// 成功を返す
	return S_OK;

#else	// NDEBUG

	// 成功を返す
	return S_OK;

#endif	// _DEBUG
}

//============================================================
//	終了処理
//============================================================
void CEditField::Uninit(void)
{
#if _DEBUG

	if (m_pField != nullptr)
	{ // 生成に失敗した場合

		// フィールドの色の全初期化
		InitAllColorField();

		// フィールドの終了
		m_pField->Uninit();
	}

#endif	// _DEBUG
}

//============================================================
//	更新処理
//============================================================
void CEditField::Update(void)
{
#if _DEBUG

	// ポインタを宣言
	CEditStageManager *pEditManager = GetPtrEditManager();	// エディットマネージャー情報
	if (pEditManager == nullptr)
	{ // エディットマネージャーが存在しない場合

		// 処理を抜ける
		assert(false);
		return;
	}

	// 大きさの更新
	UpdateSizing();

	// テクスチャ分割の更新
	UpdateTexPart();

	// 種類変更の更新
	UpdateChangeType();

	// フィールドの生成
	CreateField();

	// フィールドの破棄
	ReleaseField();

	// 位置を反映
	m_pField->SetVec3Position(pEditManager->GetVec3Position());

#endif	// _DEBUG
}

//============================================================
//	操作表示の描画処理
//============================================================
void CEditField::DrawDebugControl(void)
{
	// ポインタを宣言
	CDebugProc *pDebug = CManager::GetInstance()->GetDebugProc();	// デバッグプロックの情報

	pDebug->Print(CDebugProc::POINT_RIGHT, "大きさ：[%s/%s/%s/%s/%s/%s+%s]\n", NAME_UP_SCALE_X, NAME_DOWN_SCALE_X, NAME_UP_SCALE_Y, NAME_DOWN_SCALE_Y, NAME_UP_SCALE_Z, NAME_DOWN_SCALE_Z, NAME_TRIGGER);
	pDebug->Print(CDebugProc::POINT_RIGHT, "種類変更：[%s]\n", NAME_TYPE);
	pDebug->Print(CDebugProc::POINT_RIGHT, "削除：[%s]\n", NAME_RELEASE);
	pDebug->Print(CDebugProc::POINT_RIGHT, "設置：[%s]\n", NAME_CREATE);
}

//============================================================
//	情報表示の描画処理
//============================================================
void CEditField::DrawDebugInfo(void)
{
	// ポインタを宣言
	CDebugProc *pDebug = CManager::GetInstance()->GetDebugProc();	// デバッグプロックの情報

	pDebug->Print(CDebugProc::POINT_RIGHT, "%d：[種類]\n", m_infoCreate.type);
	pDebug->Print(CDebugProc::POINT_RIGHT, "%f %f %f：[大きさ]\n", m_infoCreate.size.x, m_infoCreate.size.y, m_infoCreate.size.z);
	pDebug->Print(CDebugProc::POINT_RIGHT, "%f %f：[テクスチャ分割X]\n", m_infoCreate.partX.x, m_infoCreate.partX.y);
	pDebug->Print(CDebugProc::POINT_RIGHT, "%f %f：[テクスチャ分割Y]\n", m_infoCreate.partY.x, m_infoCreate.partY.y);
	pDebug->Print(CDebugProc::POINT_RIGHT, "%f %f：[テクスチャ分割Z]\n", m_infoCreate.partZ.x, m_infoCreate.partZ.y);
}

//============================================================
//	情報保存処理
//============================================================
void CEditField::SaveInfo(void)
{
	// 現在の情報を保存
	m_save = m_infoCreate;
}

//============================================================
//	情報読込処理
//============================================================
void CEditField::LoadInfo(void)
{
	// 保存情報を設定
	m_infoCreate = m_save;
}

//============================================================
//	保存処理
//============================================================
void CEditField::Save(FILE *pFile)
{
#if _DEBUG

	if (pFile != nullptr)
	{ // ファイルが存在する場合

		// 見出しを書き出し
		fprintf(pFile, "#------------------------------------------------------------------------------\n");
		fprintf(pFile, "#	フィールドの配置情報\n");
		fprintf(pFile, "#------------------------------------------------------------------------------\n");

		// 情報開始地点を書き出し
		fprintf(pFile, "STAGE_BLOCKSET\n\n");

		for (int nCntPri = 0; nCntPri < MAX_PRIO; nCntPri++)
		{ // 優先順位の総数分繰り返す
	
			// ポインタを宣言
			CObject *pObjectTop = CObject::GetTop(nCntPri);	// 先頭オブジェクト
	
			if (pObjectTop != nullptr)
			{ // 先頭が存在する場合
	
				// ポインタを宣言
				CObject *pObjCheck = pObjectTop;	// オブジェクト確認用
	
				while (pObjCheck != nullptr)
				{ // オブジェクトが使用されている場合繰り返す
		
					// ポインタを宣言
					CObject *pObjectNext = pObjCheck->GetNext();	// 次オブジェクト
	
					if (pObjCheck->GetLabel() != CObject::LABEL_BLOCK)
					{ // オブジェクトラベルがフィールドではない場合
	
						// 次のオブジェクトへのポインタを代入
						pObjCheck = pObjectNext;
	
						// 次の繰り返しに移行
						continue;
					}
	
					if (pObjCheck == (CObject*)m_pField)
					{ // 同じアドレスだった場合
	
						// 次のオブジェクトへのポインタを代入
						pObjCheck = pObjectNext;
	
						// 次の繰り返しに移行
						continue;
					}

					// フィールドの情報を取得
					D3DXVECTOR3 posField		= pObjCheck->GetVec3Position();		// 位置
					D3DXVECTOR3 rotField		= pObjCheck->GetVec3Rotation();		// 向き
					D3DXVECTOR3 sizeField		= pObjCheck->GetVec3Sizing();		// 大きさ
					D3DXVECTOR2 partTexXField	= pObjCheck->GetTexturePatternX();	// テクスチャ分割X
					D3DXVECTOR2 partTexYField	= pObjCheck->GetTexturePatternY();	// テクスチャ分割Y
					D3DXVECTOR2 partTexZField	= pObjCheck->GetTexturePatternZ();	// テクスチャ分割Z
					int nType = pObjCheck->GetType();	// 種類
	
					// 情報を書き出し
					fprintf(pFile, "	BLOCKSET\n");
					fprintf(pFile, "		TYPE = %d\n", nType);
					fprintf(pFile, "		POS = %.2f %.2f %.2f\n", posField.x, posField.y, posField.z);
					fprintf(pFile, "		ROT = %.2f %.2f %.2f\n", rotField.x, rotField.y, rotField.z);
					fprintf(pFile, "		SIZE = %.2f %.2f %.2f\n", sizeField.x, sizeField.y, sizeField.z);
					fprintf(pFile, "		PARTX = %.2f %.2f \n", partTexXField.x, partTexXField.y);
					fprintf(pFile, "		PARTY = %.2f %.2f \n", partTexYField.x, partTexYField.y);
					fprintf(pFile, "		PARTZ = %.2f %.2f \n", partTexZField.x, partTexZField.y);
					fprintf(pFile, "	END_BLOCKSET\n\n");

					// 次のオブジェクトへのポインタを代入
					pObjCheck = pObjectNext;
				}
			}
		}

		// 情報終了地点を書き出し
		fprintf(pFile, "END_STAGE_BLOCKSET\n\n");
	}

#endif	// _DEBUG
}

//============================================================
//	大きさの更新処理
//============================================================
void CEditField::UpdateSizing(void)
{
	// ポインタを宣言
	CInputKeyboard *m_pKeyboard = CManager::GetInstance()->GetKeyboard();	// キーボード情報

	// 大きさを変更
	if (!m_pKeyboard->IsPress(KEY_TRIGGER))
	{
		if (m_pKeyboard->IsPress(KEY_UP_SCALE_X))
		{
			m_infoCreate.size.x += INIT_SIZE.x;
		}
		if (m_pKeyboard->IsPress(KEY_DOWN_SCALE_X))
		{
			m_infoCreate.size.x -= INIT_SIZE.x;
		}
		if (m_pKeyboard->IsPress(KEY_UP_SCALE_Y))
		{
			m_infoCreate.size.y += INIT_SIZE.y;
		}
		if (m_pKeyboard->IsPress(KEY_DOWN_SCALE_Y))
		{
			m_infoCreate.size.y -= INIT_SIZE.y;
		}
		if (m_pKeyboard->IsPress(KEY_UP_SCALE_Z))
		{
			m_infoCreate.size.z += INIT_SIZE.z;
		}
		if (m_pKeyboard->IsPress(KEY_DOWN_SCALE_Z))
		{
			m_infoCreate.size.z -= INIT_SIZE.z;
		}
	}
	else
	{
		if (m_pKeyboard->IsTrigger(KEY_UP_SCALE_X))
		{
			m_infoCreate.size.x += INIT_SIZE.x;
		}
		if (m_pKeyboard->IsTrigger(KEY_DOWN_SCALE_X))
		{
			m_infoCreate.size.x -= INIT_SIZE.x;
		}
		if (m_pKeyboard->IsTrigger(KEY_UP_SCALE_Y))
		{
			m_infoCreate.size.y += INIT_SIZE.y;
		}
		if (m_pKeyboard->IsTrigger(KEY_DOWN_SCALE_Y))
		{
			m_infoCreate.size.y -= INIT_SIZE.y;
		}
		if (m_pKeyboard->IsTrigger(KEY_UP_SCALE_Z))
		{
			m_infoCreate.size.z += INIT_SIZE.z;
		}
		if (m_pKeyboard->IsTrigger(KEY_DOWN_SCALE_Z))
		{
			m_infoCreate.size.z -= INIT_SIZE.z;
		}
	}

	// 大きさを補正
	useful::LimitNum(m_infoCreate.size.x, INIT_SIZE.x, MAX_SIZE);
	useful::LimitNum(m_infoCreate.size.y, INIT_SIZE.y, MAX_SIZE);
	useful::LimitNum(m_infoCreate.size.z, INIT_SIZE.z, MAX_SIZE);

	// 大きさを反映
	m_pField->SetVec3Sizing(m_infoCreate.size);
}

//============================================================
//	テクスチャ分割の更新処理
//============================================================
void CEditField::UpdateTexPart(void)
{
	// 変数を宣言
	D3DXVECTOR3 partTex = VEC3_ZERO;	// テクスチャ分割数

	// 分割数を設定
	partTex.x = m_infoCreate.size.x / INIT_SIZE.x;
	partTex.y = m_infoCreate.size.y / INIT_SIZE.y;
	partTex.z = m_infoCreate.size.z / INIT_SIZE.z;

	// テクスチャ分割数を設定
	m_infoCreate.partX.x = partTex.z;
	m_infoCreate.partX.y = partTex.y;
	m_infoCreate.partY.x = partTex.x;
	m_infoCreate.partY.y = partTex.z;
	m_infoCreate.partZ.x = partTex.x;
	m_infoCreate.partZ.y = partTex.y;

	// テクスチャ分割数を割当
	m_pField->SetTexturePatternX(m_infoCreate.partX);
	m_pField->SetTexturePatternY(m_infoCreate.partY);
	m_pField->SetTexturePatternZ(m_infoCreate.partZ);
}

//============================================================
//	種類変更の更新処理
//============================================================
void CEditField::UpdateChangeType(void)
{
	// ポインタを宣言
	CInputKeyboard *m_pKeyboard = CManager::GetInstance()->GetKeyboard();	// キーボード情報

	// 種類を変更
	if (m_pKeyboard->IsTrigger(KEY_TYPE))
	{
		m_infoCreate.type = (CField::EType)((m_infoCreate.type + 1) % CField::TYPE_MAX);
	}

	// 種類を反映
	m_pField->SetType(m_infoCreate.type);
}

//============================================================
//	フィールドの生成処理
//============================================================
void CEditField::CreateField(void)
{
	// ポインタを宣言
	CInputKeyboard *m_pKeyboard = CManager::GetInstance()->GetKeyboard();	// キーボード情報
	CEditStageManager *pEditManager = GetPtrEditManager();	// エディットマネージャー情報
	if (pEditManager == nullptr)
	{ // エディットマネージャーが存在しない場合

		// 処理を抜ける
		assert(false);
		return;
	}

	// 変数を宣言
	D3DXVECTOR3 posEdit = pEditManager->GetVec3Position();	// エディットの位置
	D3DXCOLOR colField = XCOL_WHITE;	// 色保存用

	// フィールドを配置
	if (m_pKeyboard->IsTrigger(KEY_CREATE))
	{
		//----------------------------------------------------
		//	フィールドの情報を配置用に変更
		//----------------------------------------------------
		// 自動更新・自動描画をONにする
		m_pField->SetEnableUpdate(true);
		m_pField->SetEnableDraw(true);

		// 色を設定
		colField = m_pField->GetColor();	// 元の色を取得
		m_pField->SetColor(D3DXCOLOR(colField.r, colField.g, colField.b, 1.0f));

		// 未保存を設定
		pEditManager->UnSave();

		//----------------------------------------------------
		//	新しいフィールドの生成
		//----------------------------------------------------
		// フィールドの生成
		m_pField = CField::Create
		( // 引数
			m_infoCreate.type,	// 種類
			posEdit,		// 位置
			VEC3_ZERO,		// 向き
			m_infoCreate.size,	// 大きさ
			m_infoCreate.partX,	// テクスチャ分割数X
			m_infoCreate.partY,	// テクスチャ分割数Y
			m_infoCreate.partZ	// テクスチャ分割数Z
		);
		assert(m_pField != nullptr);

		// 色を設定
		colField = m_pField->GetColor();	// 元の色を取得
		m_pField->SetColor(D3DXCOLOR(colField.r, colField.g, colField.b, INIT_ALPHA));
	}
}

//============================================================
//	フィールドの破棄処理
//============================================================
void CEditField::ReleaseField(void)
{
	// 変数を宣言
	bool bRelease = false;	// 破棄状況

	// ポインタを宣言
	CInputKeyboard *m_pKeyboard = CManager::GetInstance()->GetKeyboard();	// キーボード情報

	// フィールドを削除
	if (m_pKeyboard->IsTrigger(KEY_RELEASE))
	{
		// 破棄する状態を設定
		bRelease = true;
	}

	// フィールドの削除判定
	DeleteCollisionField(bRelease);
}

//============================================================
//	フィールドの削除判定
//============================================================
void CEditField::DeleteCollisionField(const bool bRelase)
{
	// ポインタを宣言
	CEditStageManager *pEditManager = GetPtrEditManager();	// エディットマネージャー情報
	if (pEditManager == nullptr)
	{ // エディットマネージャーが存在しない場合

		// 処理を抜ける
		assert(false);
		return;
	}

	// 変数を宣言
	D3DXVECTOR3 posEdit = pEditManager->GetVec3Position();	// エディットの位置

	for (int nCntPri = 0; nCntPri < MAX_PRIO; nCntPri++)
	{ // 優先順位の総数分繰り返す

		// ポインタを宣言
		CObject *pObjectTop = CObject::GetTop(nCntPri);	// 先頭オブジェクト

		if (pObjectTop != nullptr)
		{ // 先頭が存在する場合

			// ポインタを宣言
			CObject *pObjCheck = pObjectTop;	// オブジェクト確認用

			while (pObjCheck != nullptr)
			{ // オブジェクトが使用されている場合繰り返す

				// 変数を宣言
				D3DXVECTOR3 posField = VEC3_ZERO;	// フィールド位置
				D3DXVECTOR3 sizeField = VEC3_ZERO;	// フィールド大きさ

				// ポインタを宣言
				CObject *pObjectNext = pObjCheck->GetNext();	// 次オブジェクト

				if (pObjCheck->GetLabel() != CObject::LABEL_BLOCK)
				{ // オブジェクトラベルがフィールドではない場合

					// 次のオブジェクトへのポインタを代入
					pObjCheck = pObjectNext;

					// 次の繰り返しに移行
					continue;
				}

				if (pObjCheck == (CObject*)m_pField)
				{ // 同じアドレスだった場合

					// 次のオブジェクトへのポインタを代入
					pObjCheck = pObjectNext;

					// 次の繰り返しに移行
					continue;
				}

				// フィールドの位置を取得
				posField = pObjCheck->GetVec3Position();

				// フィールドの大きさを取得
				sizeField = pObjCheck->GetVec3Sizing();

				// 球体の当たり判定
				if (collision::Circle3D
				( // 引数
					posEdit,	// 判定位置
					posField,	// 判定目標位置
					(sizeField.x + sizeField.z) * 0.5f,			// 判定半径
					(m_infoCreate.size.x + m_infoCreate.size.z) * 0.5f	// 判定目標半径
				))
				{ // 判定内だった場合

					if (bRelase)
					{ // 破棄する場合

						// 終了処理
						pObjCheck->Uninit();

						// 未保存を設定
						pEditManager->UnSave();
					}
					else
					{ // 破棄しない場合

						// 赤を設定
						pObjCheck->SetColor(XCOL_RED);
					}
				}
				else
				{ // 判定外だった場合

					// 通常色を設定
					pObjCheck->SetColor(XCOL_WHITE);
				}

				// 次のオブジェクトへのポインタを代入
				pObjCheck = pObjectNext;
			}
		}
	}
}

//============================================================
//	フィールドの色の全初期化処理
//============================================================
void CEditField::InitAllColorField(void)
{
	for (int nCntPri = 0; nCntPri < MAX_PRIO; nCntPri++)
	{ // 優先順位の総数分繰り返す

		// ポインタを宣言
		CObject *pObjectTop = CObject::GetTop(nCntPri);	// 先頭オブジェクト

		if (pObjectTop != nullptr)
		{ // 先頭が存在する場合

			// ポインタを宣言
			CObject *pObjCheck = pObjectTop;	// オブジェクト確認用

			while (pObjCheck != nullptr)
			{ // オブジェクトが使用されている場合繰り返す

				// ポインタを宣言
				CObject *pObjectNext = pObjCheck->GetNext();	// 次オブジェクト

				if (pObjCheck->GetLabel() != CObject::LABEL_BLOCK)
				{ // オブジェクトラベルがフィールドではない場合

					// 次のオブジェクトへのポインタを代入
					pObjCheck = pObjectNext;

					// 次の繰り返しに移行
					continue;
				}

				if (pObjCheck == (CObject*)m_pField)
				{ // 同じアドレスだった場合

					// 次のオブジェクトへのポインタを代入
					pObjCheck = pObjectNext;

					// 次の繰り返しに移行
					continue;
				}

				// 通常色を設定
				pObjCheck->SetColor(XCOL_WHITE);

				// 次のオブジェクトへのポインタを代入
				pObjCheck = pObjectNext;
			}
		}
	}
}
#endif
