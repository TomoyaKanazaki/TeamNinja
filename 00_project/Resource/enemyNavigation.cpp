//============================================================
//
//	敵のナビゲーション処理 [enemyNavigation.cpp]
//	Author：小原立暉
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "manager.h"
#include "enemyNavigation.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{

}

//************************************************************
//	子クラス [CEnemyNav] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CEnemyNav::CEnemyNav() :
	m_posDest(VEC3_ZERO),	// 目標位置
	m_state(STATE_STOP),	// 状態
	m_nStateCount(0)		// 状態カウント
{

}

//============================================================
//	デストラクタ
//============================================================
CEnemyNav::~CEnemyNav()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CEnemyNav::Init(void)
{
	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CEnemyNav::Uninit(void)
{
	// 自身を破棄
	delete this;
}

//============================================================
//	更新処理
//============================================================
void CEnemyNav::Update
(
	D3DXVECTOR3* pPos,		// 位置
	D3DXVECTOR3* pRot,		// 向き
	D3DXVECTOR3* pMove,		// 移動量
	D3DXVECTOR3* pRotDest,	// 目的の向き
	const float fSpeed,		// 速度
	const float fDeltaTime	// デルタタイム
)
{
	switch (m_state)
	{
	case CEnemyNav::STATE_STOP:

		// 停止状態処理
		StopFunc(*pPos, *pRot, pRotDest);

		break;

	case CEnemyNav::STATE_TURN:

		// ターン状態処理
		TurnFunc(pRot, pMove, *pRotDest, fSpeed, fDeltaTime);

		break;

	case CEnemyNav::STATE_MOVE:

		// 移動状態処理
		MoveFunc(pPos, *pMove);

		break;

	default:

		// 停止
		assert(false);

		break;
	}
}