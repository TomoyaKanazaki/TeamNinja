//============================================================
//
//	分身出る方向UI処理 [cloneAngleUI.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "manager.h"
#include "cloneAngleUI.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const char* TEXTURE_FILE = "";		// テクスチャファイル

	const int	PRIORITY = 2;			// 影の優先順位
	const D3DXVECTOR3 RADIUS = D3DXVECTOR3(50.0f, 0.0f, 50.0f);		// 半径(サイズ)
}

//************************************************************
//	子クラス [CCloneAngleUI] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CCloneAngleUI::CCloneAngleUI() : CObject3D(CObject::LABEL_NONE, CObject::DIM_3D, PRIORITY),
m_pParentObject(nullptr)		// 親オブジェクト
{

}

//============================================================
//	デストラクタ
//============================================================
CCloneAngleUI::~CCloneAngleUI()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CCloneAngleUI::Init(void)
{
	// メンバ変数を初期化
	m_pParentObject = nullptr;		// 親オブジェクト

	// オブジェクト3Dの初期化
	if (FAILED(CObject3D::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CCloneAngleUI::Uninit(void)
{
	// 親オブジェクトを NULL にする
	m_pParentObject = nullptr;

	// オブジェクト3Dの終了
	CObject3D::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CCloneAngleUI::Update(const float fDeltaTime)
{
	// オブジェクト3Dの更新
	CObject3D::Update(fDeltaTime);
}

//============================================================
//	描画処理
//============================================================
void CCloneAngleUI::Draw(CShader* pShader)
{
	// オブジェクト3Dの描画
	CObject3D::Draw(pShader);
}

//============================================================
//	生成処理
//============================================================
CCloneAngleUI* CCloneAngleUI::Create(CObject *pParent)
{
	// 影の生成
	CCloneAngleUI* pUI = new CCloneAngleUI;

	if (pUI == nullptr)
	{ // 生成に失敗した場合

		return nullptr;
	}
	else
	{ // 生成に成功した場合

		// 影の初期化
		if (FAILED(pUI->Init()))
		{ // 初期化に失敗した場合

			// 影の破棄
			SAFE_DELETE(pUI);
			return nullptr;
		}

		// 位置を設定
		pUI->SetVec3Position(pParent->GetVec3Position());

		// サイズを設定
		pUI->SetVec3Sizing(RADIUS);

		// 親オブジェクトを設定
		pUI->m_pParentObject = pParent;

		// テクスチャを登録・割当
		//pUI->BindTexture(GET_MANAGER->GetTexture()->Regist(TEXTURE_FILE));

		// 確保したアドレスを返す
		return pUI;
	}
}
