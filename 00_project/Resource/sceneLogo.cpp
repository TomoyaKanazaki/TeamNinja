//============================================================
//
//	ロゴ画面処理 [scenelogo.cpp]
//	Author：小原立暉
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "sceneLogo.h"
#include "manager.h"
#include "logoManager.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{

}

//************************************************************
//	静的メンバ変数宣言
//************************************************************
CLogoManager* CSceneLogo::m_pLogoManager = nullptr;	// セレクトマネージャー

//************************************************************
//	子クラス [CSceneLogo] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CSceneLogo::CSceneLogo(const EMode mode) : CScene(mode)
{

}

//============================================================
//	デストラクタ
//============================================================
CSceneLogo::~CSceneLogo()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CSceneLogo::Init(void)
{
	// シーンの初期化
	if (FAILED(CScene::Init()))	// 当たり判定/プレイヤー生成
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// セレクトマネージャーの生成
	m_pLogoManager = CLogoManager::Create();
	if (m_pLogoManager == nullptr)
	{ // 生成に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CSceneLogo::Uninit(void)
{
	// セレクトマネージャーの破棄
	SAFE_REF_RELEASE(m_pLogoManager);

	// シーンの終了
	CScene::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CSceneLogo::Update(const float fDeltaTime)
{
	// セレクトマネージャーの更新
	assert(m_pLogoManager != nullptr);
	m_pLogoManager->Update(fDeltaTime);

	// シーンの更新
	CScene::Update(fDeltaTime);
}

//============================================================
//	セレクトマネージャー取得処理
//============================================================
CLogoManager* CSceneLogo::GetLogoManager(void)
{
	// インスタンス未使用
	assert(m_pLogoManager != nullptr);

	// セレクトマネージャーのポインタを返す
	return m_pLogoManager;
}
