//============================================================
//
// 重い扉の処理 [gimmick_heavydoor.cpp]
// Author：佐藤根詩音
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "gimmick_heavydoor.h"
#include "manager.h"
#include "player.h"
#include "player_clone.h"
#include "debugproc.h"

//************************************************************
//	定数宣言
//************************************************************
namespace
{
	const int OPEN_DOOR = 60 * 2;		// ドアが開くまでの時間
}
//============================================================
//	コンストラクタ
//============================================================
CGimmickHeavyDoor::CGimmickHeavyDoor() : CGimmickAction(),
m_nOpenCounter(0)		// 扉が開くまでのカウンター
{

}

//============================================================
//	デストラクタ
//============================================================
CGimmickHeavyDoor::~CGimmickHeavyDoor()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CGimmickHeavyDoor::Init(void)
{
	// ギミックアクションの初期化
	if (FAILED(CGimmickAction::Init()))
	{ // 初期化に失敗した場合

		// 失敗を返す
		assert(false);
		return E_FAIL;
	}

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CGimmickHeavyDoor::Uninit(void)
{
	// ギミックアクションの終了
	CGimmickAction::Uninit();
}

//============================================================
//	更新処理
//============================================================
void CGimmickHeavyDoor::Update(const float fDeltaTime)
{
	if (IsActive())
	{ // 必要な人数が揃ってる場合

		if (m_nOpenCounter >= OPEN_DOOR)
		{ // 一定時間経ったら

			// 扉全開！！
			SetMoment(GET_PLAYER->GimmickLand());
		}
		else
		{ // 時間経ってない場合

			m_nOpenCounter++;
		}
	}
	else
	{ // 必要な人数が揃ってない場合

		// 扉開けてない
		SetMoment(false);

		m_nOpenCounter = 0;		// カウンター初期化
	}


	// ギミックアクションの更新
	CGimmickAction::Update(fDeltaTime);
}

//============================================================
//	描画処理
//============================================================
void CGimmickHeavyDoor::Draw(CShader* pShader)
{
	// ギミックアクションの描画
	CGimmickAction::Draw(pShader);
}
