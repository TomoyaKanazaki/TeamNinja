//============================================================
//
//	フェードアウト状態処理 [fadeStateOut.cpp]
//	Author：藤田勇一
//
//============================================================
//************************************************************
//	インクルードファイル
//************************************************************
#include "fadeStateOut.h"
#include "fade.h"

//************************************************************
//	子クラス [CFadeStateOut] のメンバ関数
//************************************************************
//============================================================
//	コンストラクタ
//============================================================
CFadeStateOut::CFadeStateOut() : m_fCurTime(0.0f)	// 現在の経過時間
{

}

//============================================================
//	デストラクタ
//============================================================
CFadeStateOut::~CFadeStateOut()
{

}

//============================================================
//	初期化処理
//============================================================
HRESULT CFadeStateOut::Init(void)
{
	// メンバ変数を初期化
	m_fCurTime = 0.0f;	// 現在の経過時間

	// 成功を返す
	return S_OK;
}

//============================================================
//	終了処理
//============================================================
void CFadeStateOut::Uninit(void)
{
	// 自身の破棄
	delete this;
}

//============================================================
//	更新処理
//============================================================
void CFadeStateOut::Update(const float fDeltaTime)
{
	// タイマーを加算
	m_fCurTime += fDeltaTime;

	const float fOutTime = m_pContext->GetOutTime();	// アウト時間
	const float fDiffAlpha = 1.0f - 0.0f;				// 透明度差分
	float fRate = easeing::OutQuad(m_fCurTime, 0.0f, fOutTime);	// 経過時刻の割合を計算

	// 透明度を反映
	m_pContext->SetAlpha(0.0f + (fDiffAlpha * fRate));
	if (m_fCurTime >= fOutTime)
	{ // 不透明になった場合

		// 次シーンへ遷移する
		m_pContext->TransNextMode();

		// 透明度を反映
		m_pContext->SetAlpha(1.0f);

		// フェードイン状態にする
		m_pContext->ChangeState(new CFadeStateIn);
	}
}
