//====================================
//エフェクシアコントロールクラス
//Author: 丹野 竜之介
//====================================
#ifndef  _EFFEKSEERCONTROL_H_//二重インクルード防止のマクロ
#define _EFFEKSEERCONTROL_H_
//インクルード
#include "main.h"
#include <vector>
#include <functional>

class CEffekseer
{
public:
	//クラス内クラス
	class CEffectData//エフェクト情報
	{
	public:

		CEffectData();
		~CEffectData();
	
		::Effekseer::Vector3D m_pos;	//座標
		::Effekseer::Vector3D m_rot;	//向き
		::Effekseer::Vector3D m_move;	//移動量
		Effekseer::Handle handle;		//本体
		Effekseer::EffectRef efcRef;	//参照情報
		float m_fScale;					//スケール
		bool m_bLoop;					//ループ
	};

	CEffekseer();
	~CEffekseer();
	void Init();
	void Update();
	void Draw();

	void Uninit();
	Effekseer::EffectRef Loading(std::string path);
	CEffectData* Create(std::string path, D3DXVECTOR3 pos, D3DXVECTOR3 rot, D3DXVECTOR3 move, float fScale = 1.0f, bool bLoop = false);
	static CEffekseer* GetInstance() {
		if (pInstance == NULL) { pInstance = new CEffekseer; return pInstance; }
		else
		{
			return pInstance;
		}
	}
	Effekseer::ManagerRef GetManager() { return m_EfkManager; }
	std::vector<CEffectData*> GetList() { return m_vEffect; }
protected:
	std::function<void()> onLostDevice;
	std::function<void()> onResetDevice;

private:
	static CEffekseer* pInstance;						//コントロールクラス本体
	std::vector<CEffectData *> m_vEffect;				//エフェクトプール
	EffekseerRendererDX9::RendererRef m_efkRenderer;	//レンダラー
	Effekseer::ManagerRef m_EfkManager;					//マネージャ
	int32_t time = 0;									//時間
};

//エフェクトデータを外部で使用するためのクラス
class CEFFECTDATA
{
public:
	CEFFECTDATA();
	~CEFFECTDATA();
	CEFFECTDATA& operator=(const CEffekseer::CEffectData* o)
	{
		*(this->m_ppEffect) = (CEffekseer::CEffectData*)o;
	}
	
	bool IsExists() { return(!*m_ppEffect == NULL); }

	void SetPos(D3DXVECTOR3 pos);
	void SetRot(D3DXVECTOR3 rot);
	void SetMove(D3DXVECTOR3 move);
	void SetScale(float fscale);

	D3DXVECTOR3 GetPos(){	
							D3DXVECTOR3 Vec;
							Vec.x = (*m_ppEffect)->m_pos.X;
							Vec.y = (*m_ppEffect)->m_pos.Y;
							Vec.z = (*m_ppEffect)->m_pos.Z;
							return Vec;
						}
	D3DXVECTOR3 GetRot(){
							D3DXVECTOR3 Vec;
							Vec.x = (*m_ppEffect)->m_rot.X;
							Vec.y = (*m_ppEffect)->m_rot.Y;
							Vec.z = (*m_ppEffect)->m_rot.Z;
							return Vec;
						}
	D3DXVECTOR3 GetMove(){
							D3DXVECTOR3 Vec;
							Vec.x = (*m_ppEffect)->m_move.X;
							Vec.y = (*m_ppEffect)->m_move.Y;
							Vec.z = (*m_ppEffect)->m_move.Z;
							return Vec;
						}
	float GetScale() { return (*m_ppEffect)->m_fScale; }
private:
	CEffekseer::CEffectData** m_ppEffect;
};


#endif // ! _EFFEKSEERCONTROL_H_